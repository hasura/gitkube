/*
   Copyright 2018 The Gitkube Authors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/hasura/gitkube/pkg/apis/gitkube.sh/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RemoteLister helps list Remotes.
type RemoteLister interface {
	// List lists all Remotes in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Remote, err error)
	// Remotes returns an object that can list and get Remotes.
	Remotes(namespace string) RemoteNamespaceLister
	RemoteListerExpansion
}

// remoteLister implements the RemoteLister interface.
type remoteLister struct {
	indexer cache.Indexer
}

// NewRemoteLister returns a new RemoteLister.
func NewRemoteLister(indexer cache.Indexer) RemoteLister {
	return &remoteLister{indexer: indexer}
}

// List lists all Remotes in the indexer.
func (s *remoteLister) List(selector labels.Selector) (ret []*v1alpha1.Remote, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Remote))
	})
	return ret, err
}

// Remotes returns an object that can list and get Remotes.
func (s *remoteLister) Remotes(namespace string) RemoteNamespaceLister {
	return remoteNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RemoteNamespaceLister helps list and get Remotes.
type RemoteNamespaceLister interface {
	// List lists all Remotes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Remote, err error)
	// Get retrieves the Remote from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Remote, error)
	RemoteNamespaceListerExpansion
}

// remoteNamespaceLister implements the RemoteNamespaceLister
// interface.
type remoteNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Remotes in the indexer for a given namespace.
func (s remoteNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Remote, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Remote))
	})
	return ret, err
}

// Get retrieves the Remote from the indexer for a given namespace and name.
func (s remoteNamespaceLister) Get(name string) (*v1alpha1.Remote, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("remote"), name)
	}
	return obj.(*v1alpha1.Remote), nil
}
